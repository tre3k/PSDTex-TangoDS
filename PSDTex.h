/*----- PROTECTED REGION ID(PSDTex.h) ENABLED START -----*/
//=============================================================================
//
// file :        PSDTex.h
//
// description : Include file for the PSDTex class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef PSDTex_H
#define PSDTex_H

#include <tango.h>

#include "plx9030detector.h"
#include "LogClass.h"

/*----- PROTECTED REGION END -----*/	//	PSDTex.h

/**
 *  PSDTex class description:
 *    
 */

namespace PSDTex_ns
{
/*----- PROTECTED REGION ID(PSDTex::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	PSDTex::Additional Class Declarations

class PSDTex : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(PSDTex::Data Members) ENABLED START -----*/

private:
	PLX9030Detector::plx9030Detector *pd = nullptr;
	LogClass *log = nullptr;
	short int global_flags = 0;
	bool isStart = false;

	void readMem(void);
	
/*----- PROTECTED REGION END -----*/	//	PSDTex::Data Members

//	Device property data members
public:
	//	devicefile_path:	Device file path
	string	devicefile_path;
	//	log_file:	
	string	log_file;

//	Attribute data members
public:
	Tango::DevBoolean	*attr_full_mem_read;
	Tango::DevBoolean	*attr_half_mem_read;
	Tango::DevDouble	*attr_image_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PSDTex(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PSDTex(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PSDTex(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~PSDTex() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : PSDTex::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute full_mem related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_full_mem(Tango::Attribute &attr);
	virtual bool is_full_mem_allowed(Tango::AttReqType type);
/**
 *	Attribute half_mem related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_half_mem(Tango::Attribute &attr);
	virtual bool is_half_mem_allowed(Tango::AttReqType type);
/**
 *	Attribute image related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Image max = 256 x 256
 */
	virtual void read_image(Tango::Attribute &attr);
	virtual bool is_image_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : PSDTex::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Start related method
	 *	Description: 
	 *
	 */
	virtual void start();
	virtual bool is_Start_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: 
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Clear related method
	 *	Description: 
	 *
	 */
	virtual void clear();
	virtual bool is_Clear_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : PSDTex::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(PSDTex::Additional Method prototypes) ENABLED START -----*/
	
	void setImageCell(int x,int y,Tango::DevDouble value);
	void clearImage(void);

/*----- PROTECTED REGION END -----*/	//	PSDTex::Additional Method prototypes
};

/*----- PROTECTED REGION ID(PSDTex::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	PSDTex::Additional Classes Definitions

}	//	End of namespace

#endif   //	PSDTex_H
